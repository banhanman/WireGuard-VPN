import os
import logging
import sqlite3
import subprocess
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, CallbackQueryHandler, CallbackContext, 
    MessageHandler, Filters
)
from uuid import uuid4
from config import TOKEN, ADMIN_IDS, WG_DIR, WG_SERVER_IP, WG_SERVER_PORT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–æ–≤
os.makedirs(WG_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('wireguard_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE,
        username TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS configs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        config_name TEXT DEFAULT 'default',
        config_path TEXT UNIQUE,
        private_key TEXT,
        public_key TEXT,
        ip_address TEXT,
        enabled BOOLEAN DEFAULT 1,
        speed_limit INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )
    ''')
    
    conn.commit()
    conn.close()

init_db()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π WireGuard
def generate_keys():
    private_key = subprocess.check_output("wg genkey", shell=True).decode('utf-8').strip()
    public_key = subprocess.check_output(f"echo '{private_key}' | wg pubkey", shell=True).decode('utf-8').strip()
    return private_key, public_key

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def create_config(user_id, config_name="default"):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = sqlite3.connect('wireguard_bot.db')
    cursor = conn.cursor()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute("INSERT OR IGNORE INTO users (telegram_id) VALUES (?)", (user_id,))
    conn.commit()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏
    private_key, public_key = generate_keys()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π IP (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    cursor.execute("SELECT MAX(ip_address) FROM configs")
    last_ip = cursor.fetchone()[0]
    ip_address = "10.0.0.2" if not last_ip else f"10.0.0.{int(last_ip.split('.')[-1]) + 1}"
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_id = str(uuid4())
    config_path = os.path.join(WG_DIR, f"{config_id}.conf")
    
    config_content = f"""[Interface]
PrivateKey = {private_key}
Address = {ip_address}/24
DNS = 8.8.8.8

[Peer]
PublicKey = SERVER_PUBLIC_KEY
AllowedIPs = 0.0.0.0/0
Endpoint = {WG_SERVER_IP}:{WG_SERVER_PORT}
PersistentKeepalive = 25
"""
    with open(config_path, 'w') as f:
        f.write(config_content)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        "INSERT INTO configs (user_id, config_name, config_path, private_key, public_key, ip_address) "
        "VALUES ((SELECT id FROM users WHERE telegram_id = ?), ?, ?, ?, ?, ?)",
        (user_id, config_name, config_path, private_key, public_key, ip_address)
    )
    conn.commit()
    conn.close()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ root)
    os.system(f"wg set wg0 peer {public_key} allowed-ips {ip_address}/32")
    
    return config_path

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
def update_server_config():
    os.system("wg-quick save wg0 > /etc/wireguard/wg0.conf")

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–∞—à ID –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.")
        return
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data='create_config')],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data='list_configs')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞", callback_data='server_settings')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WireGuard VPN Manager!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id
    
    if user_id not in ADMIN_IDS:
        query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    data = query.data
    
    if data == 'create_config':
        context.user_data['action'] = 'create_config'
        query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    
    elif data == 'list_configs':
        conn = sqlite3.connect('wireguard_bot.db')
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id, config_name, enabled FROM configs "
            "WHERE user_id = (SELECT id FROM users WHERE telegram_id = ?)",
            (user_id,)
        )
        configs = cursor.fetchall()
        conn.close()
        
        if not configs:
            query.edit_message_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.")
            return
        
        keyboard = []
        for config_id, name, enabled in configs:
            status = "üü¢" if enabled else "üî¥"
            keyboard.append(
                [InlineKeyboardButton(f"{status} {name}", callback_data=f"config_{config_id}")]
            )
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text("üìã –í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", reply_markup=reply_markup)
    
    elif data.startswith('config_'):
        config_id = data.split('_')[1]
        context.user_data['selected_config'] = config_id
        
        conn = sqlite3.connect('wireguard_bot.db')
        cursor = conn.cursor()
        cursor.execute(
            "SELECT config_name, enabled, speed_limit, ip_address FROM configs WHERE id = ?",
            (config_id,)
        )
        config_data = cursor.fetchone()
        conn.close()
        
        if not config_data:
            query.edit_message_text("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        name, enabled, speed_limit, ip = config_data
        status = "–∞–∫—Ç–∏–≤–Ω–∞" if enabled else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
        
        keyboard = [
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data=f'download_{config_id}')],
            [InlineKeyboardButton("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f'rename_{config_id}')],
            [InlineKeyboardButton("üö´ –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{config_id}')],
            [InlineKeyboardButton("üîå –í–∫–ª—é—á–∏—Ç—å" if not enabled else "üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å", 
             callback_data=f'toggle_{config_id}')],
            [InlineKeyboardButton("‚è± –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å", callback_data=f'limit_{config_id}')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='list_configs')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {name}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"IP: {ip}\n"
            f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏: {speed_limit} Mbps\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    elif data.startswith('download_'):
        config_id = data.split('_')[1]
        conn = sqlite3.connect('wireguard_bot.db')
        cursor = conn.cursor()
        cursor.execute("SELECT config_path FROM configs WHERE id = ?", (config_id,))
        config_path = cursor.fetchone()[0]
        conn.close()
        
        if os.path.exists(config_path):
            with open(config_path, 'rb') as f:
                context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=f,
                    filename=os.path.basename(config_path),
                    caption="–í–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"
                )
        else:
            query.edit_message_text("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    elif data.startswith('toggle_'):
        config_id = data.split('_')[1]
        conn = sqlite3.connect('wireguard_bot.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        cursor.execute("SELECT enabled, public_key FROM configs WHERE id = ?", (config_id,))
        enabled, public_key = cursor.fetchone()
        new_status = not enabled
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        cursor.execute("UPDATE configs SET enabled = ? WHERE id = ?", (new_status, config_id))
        conn.commit()
        conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        if new_status:
            os.system(f"wg set wg0 peer {public_key} allowed-ips 0.0.0.0/0")
        else:
            os.system(f"wg set wg0 peer {public_key} remove")
        
        update_server_config()
        query.edit_message_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {'–∞–∫—Ç–∏–≤–Ω–∞' if new_status else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}")
    
    elif data == 'back_to_main':
        start(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def text_handler(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    text = update.message.text
    
    if 'action' not in context.user_data:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return
    
    action = context.user_data['action']
    
    if action == 'create_config':
        config_name = text.strip()
        if not config_name:
            update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return
        
        try:
            config_path = create_config(user_id, config_name)
            with open(config_path, 'rb') as f:
                update.message.reply_document(
                    document=f,
                    caption=f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' —Å–æ–∑–¥–∞–Ω–∞!"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        
        del context.user_data['action']
    
    elif action == 'rename_config':
        if 'selected_config' not in context.user_data:
            update.message.reply_text("–û—à–∏–±–∫–∞: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
            return
        
        config_id = context.user_data['selected_config']
        new_name = text.strip()
        
        if not new_name:
            update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
            return
        
        conn = sqlite3.connect('wireguard_bot.db')
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE configs SET config_name = ? WHERE id = ?",
            (new_name, config_id)
        conn.commit()
        conn.close()
        
        update.message.reply_text(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{new_name}'")
        del context.user_data['action']
        del context.user_data['selected_config']

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
def speed_limit_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    if 'selected_config' not in context.user_data:
        query.edit_message_text("–û—à–∏–±–∫–∞: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        return
    
    config_id = context.user_data['selected_config']
    context.user_data['action'] = 'set_speed_limit'
    
    query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ Mbps (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π):")

def main() -> None:
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, text_handler))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
